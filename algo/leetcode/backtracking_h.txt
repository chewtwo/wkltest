Hard - Backtracking

131.Palindrome Partitioning
    分割回文串
212.Word Search II
    单词搜索 II
301.Remove Invalid Parentheses
    删除无效的括号
44.Wildcard Matching
   通配符匹配
10.Regular Expression Matching
   正则表达式匹配

*****************************************************************************************************
#131 Palindrome Partitioning
     分割回文串
*****************************************************************************************************
Example:
Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]

class Solution {
public:
    vector<vector<string>> partition(string s) {
       vector<vector<string> > ret;
        if(s.empty()) return ret;
        
        vector<string> path;
        dfs(0, s, path, ret);
        
        return ret; 
    }
    
    void dfs(int index, string& s, vector<string>& path, vector<vector<string> >& ret) {
        if(index == s.size()) {
            ret.push_back(path);
            return;
        }
        for(int i = index; i < s.size(); ++i) {
            if(isPalindrome(s, index, i)) {
                path.push_back(s.substr(index, i - index + 1));
                dfs(i+1, s, path, ret);
                path.pop_back();
            }
        }
    }
    
    bool isPalindrome(const string& s, int start, int end) {
        while(start <= end) {
            if(s[start++] != s[end--])
                return false;
        }
        return true;
    }
};

*****************************************************************************************************
#212 Word Search II
     单词搜索 II
*****************************************************************************************************
前缀树停止回溯
Example:
Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

class Node{
    public:
    int isWord;
    Node *next[26];
};

class Solution {
public:
    vector<vector<int>> vis;
    vector<int> isPresent;
    Node *root;
    
    void constructTrie(vector<string> &words, Node *rt){
        Node *node;
        for(int i=0;i<words.size();i++){
            node = rt;
            for(int j=0;j<words[i].length();j++){
                if(node->next[words[i][j] - 'a'] == NULL){
                    node->next[words[i][j] - 'a'] = new Node();
                    node->next[words[i][j] - 'a']->isWord = 0;
                }
                node = node->next[words[i][j] - 'a'];
            }
            node->isWord = i+1;
        }
    }
    
    void dfs(int i, int j, vector<vector<char>> &board, Node *node){
        if(node == NULL) return;
        if(vis[i][j] == 1){
            return;
        }
        vis[i][j] = 1;
        if(node->isWord > 0){
            isPresent[node->isWord-1] = 1;
        }
        callNext(i+1, j, board, node);
        callNext(i-1, j, board, node);
        callNext(i, j+1, board, node);
        callNext(i, j-1, board, node);
        vis[i][j] = 0;
        return;
    }
    
    void callNext(int i, int j, vector<vector<char>> &board, Node *node){
        if(i < 0 || j < 0 || i >= board.size() || j >= board[0].size()){
            return;
        }
        if(node->next[board[i][j] - 'a'] == NULL){
            return;
        }
        dfs(i, j, board, node->next[board[i][j] - 'a']);
    }

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> ans;
        if(words.size() == 0){
            return ans;
        }
        root = new Node();
        root->isWord = 0;
        constructTrie(words, root);
        for(int i=0;i<words.size();i++){
            isPresent.push_back(0);
        }
        for(int i=0;i<board.size();i++){
            vector<int> add;
            for(int j=0;j<board[i].size();j++){
                add.push_back(0);
            }
            vis.push_back(add);
        }
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[i].size();j++){
                if(root->next[board[i][j] - 'a'] != NULL){
                    dfs(i, j, board, root->next[board[i][j] - 'a']);
                }
            }
        }
        for(int i=0;i<words.size();i++){
            if(isPresent[i] == 1){
                ans.push_back(words[i]);
            }
        }
        return ans;
    }
};

*****************************************************************************************************
#301 Remove Invalid Parentheses
     删除无效的括号
*****************************************************************************************************
Example 1:
Input: "()())()"
Output: ["()()()", "(())()"]

Example 2:
Input: "(a)())()"
Output: ["(a)()()", "(a())()"]

Example 3:
Input: ")("
Output: [""]

cpp:
class Solution {
public:
    vector<string> removeInvalidParentheses(string s) {
        int left = 0, right = 0;
        for (char ch : s) {
          if (ch == '(') {
            ++left;
          } else if (ch == ')') {
            if (left > 0) {
              --left;
            } else {
              ++right;
            }
          }
        }
        res.clear();
        dfs(s, 0, left, right, 0, "");
        return res;
    }
    
private:
  void dfs(const string& s, int start, int left, int right, 
           int open, string path) {
    if (start == s.length()) {
      if (left == 0 && right == 0 && open == 0) {
        res.push_back(path);
      }
      return;
    }
    if (left < 0 || right < 0 || open < 0) return;
    
    char c = s[start];
    if (c == '(') {
      if (start == 0 || s[start - 1] != c) {
        for (int i = 0; start + i < s.length() && s[start + i] == c && i + 1 <= left; ++i) {
          dfs(s, start + i + 1, left - i - 1, right, open, path);
        }
      }
      
      dfs(s, start + 1, left, right, open + 1, path + c);
    } else if (c == ')') {
      if (start == 0 || s[start - 1] != c) {
        for (int i = 0; start + i < s.length() && s[start + i] == c && i + 1 <= right; ++i) {
          dfs(s, start + i + 1, left, right - i - 1, open, path);
        }
      }      
      
      dfs(s, start + 1, left, right, open - 1, path + c);
    } else {
      dfs(s, start + 1, left, right, open, path + c);
    }
  }

  vector<string> res;
};




java:
class Solution {

  private Set<String> validExpressions = new HashSet<String>();

  private void recurse(
      String s,
      int index,
      int leftCount,
      int rightCount,
      int leftRem,
      int rightRem,
      StringBuilder expression) {

    // If we reached the end of the string, just check if the resulting expression is
    // valid or not and also if we have removed the total number of left and right
    // parentheses that we should have removed.
    if (index == s.length()) {
      if (leftRem == 0 && rightRem == 0) {
        this.validExpressions.add(expression.toString());
      }

    } else {
      char character = s.charAt(index);
      int length = expression.length();

      // The discard case. Note that here we have our pruning condition.
      // We don't recurse if the remaining count for that parenthesis is == 0.
      if ((character == '(' && leftRem > 0) || (character == ')' && rightRem > 0)) {
        this.recurse(
            s,
            index + 1,
            leftCount,
            rightCount,
            leftRem - (character == '(' ? 1 : 0),
            rightRem - (character == ')' ? 1 : 0),
            expression);
      }

      expression.append(character);

      // Simply recurse one step further if the current character is not a parenthesis.
      if (character != '(' && character != ')') {

        this.recurse(s, index + 1, leftCount, rightCount, leftRem, rightRem, expression);

      } else if (character == '(') {

        // Consider an opening bracket.
        this.recurse(s, index + 1, leftCount + 1, rightCount, leftRem, rightRem, expression);

      } else if (rightCount < leftCount) {

        // Consider a closing bracket.
        this.recurse(s, index + 1, leftCount, rightCount + 1, leftRem, rightRem, expression);
      }

      // Delete for backtracking.
      expression.deleteCharAt(length);
    }
  }

  public List<String> removeInvalidParentheses(String s) {

    int left = 0, right = 0;

    // First, we find out the number of misplaced left and right parentheses.
    for (int i = 0; i < s.length(); i++) {

      // Simply record the left one.
      if (s.charAt(i) == '(') {
        left++;
      } else if (s.charAt(i) == ')') {
        // If we don't have a matching left, then this is a misplaced right, record it.
        right = left == 0 ? right + 1 : right;

        // Decrement count of left parentheses because we have found a right
        // which CAN be a matching one for a left.
        left = left > 0 ? left - 1 : left;
      }
    }

    this.recurse(s, 0, 0, 0, left, right, new StringBuilder());
    return new ArrayList<String>(this.validExpressions);
  }
}

*****************************************************************************************************
#44 Wildcard Matching
    通配符匹配
*****************************************************************************************************
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.

Example 1:
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:
Input:
s = "aa"
p = "*"
Output: true
Explanation: '*' matches any sequence.

Example 3:
Input:
s = "cb"
p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.

Example 4:
Input:
s = "adceb"
p = "*a*b"
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".

Example 5:
Input:
s = "acdcb"
p = "a*c?b"
Output: false

class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.length(), n = p.length();
        int i = 0, j = 0, asterick = -1, match;
        while (i < m) {
            if (j < n && p[j] == '*') {
                match = i;  
                asterick = j++;
            }
            else if (j < n && (s[i] == p[j] || p[j] == '?')) {
                i++;
                j++;
            }
            else if (asterick >= 0) {
                i = ++match;
                j = asterick + 1;
            }
            else return false;
        }
        while (j < n && p[j] == '*') j++;
        return j == n;
    }
};

*****************************************************************************************************
#10 Regular Expression Matching
    正则表达式匹配
*****************************************************************************************************
'.' Matches any single character.
'*' Matches zero or more of the preceding element.

Example 1:
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:
Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".

Example 3:
Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".

Example 4:
Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".

Example 5:
Input:
s = "mississippi"
p = "mis*is*p*."
Output: false

cpp:
class Solution {
public:
    bool isMatch(string s, string p) {
        /**
         * f[i][j]: if s[0..i-1] matches p[0..j-1]
         * if p[j - 1] != '*'
         *      f[i][j] = f[i - 1][j - 1] && s[i - 1] == p[j - 1]
         * if p[j - 1] == '*', denote p[j - 2] with x
         *      f[i][j] is true iff any of the following is true
         *      1) "x*" repeats 0 time and matches empty: f[i][j - 2]
         *      2) "x*" repeats >= 1 times and matches "x*x": s[i - 1] == x && f[i - 1][j]
         * '.' matches any single character
         */
        int m = s.size(), n = p.size();
        vector<vector<bool>> f(m + 1, vector<bool>(n + 1, false));
        
        f[0][0] = true;
        for (int i = 1; i <= m; i++)
            f[i][0] = false;
        // p[0.., j - 3, j - 2, j - 1] matches empty iff p[j - 1] is '*' and p[0..j - 3] matches empty
        for (int j = 1; j <= n; j++)
            f[0][j] = j > 1 && '*' == p[j - 1] && f[0][j - 2];
        
        for (int i = 1; i <= m; i++)
            for (int j = 1; j <= n; j++)
                if (p[j - 1] != '*')
                    f[i][j] = f[i - 1][j - 1] && (s[i - 1] == p[j - 1] || '.' == p[j - 1]);
                else
                    // p[0] cannot be '*' so no need to check "j > 1" here
                    f[i][j] = f[i][j - 2] || (s[i - 1] == p[j - 2] || '.' == p[j - 2]) && f[i - 1][j];
        
        return f[m][n];
    }
};

java:
enum Result {
    TRUE, FALSE
}

class Solution {
    Result[][] memo;

    public boolean isMatch(String text, String pattern) {
        memo = new Result[text.length() + 1][pattern.length() + 1];
        return dp(0, 0, text, pattern);
    }

    public boolean dp(int i, int j, String text, String pattern) {
        if (memo[i][j] != null) {
            return memo[i][j] == Result.TRUE;
        }
        boolean ans;
        if (j == pattern.length()){
            ans = i == text.length();
        } else{
            boolean first_match = (i < text.length() &&
                                   (pattern.charAt(j) == text.charAt(i) ||
                                    pattern.charAt(j) == '.'));

            if (j + 1 < pattern.length() && pattern.charAt(j+1) == '*'){
                ans = (dp(i, j+2, text, pattern) ||
                       first_match && dp(i+1, j, text, pattern));
            } else {
                ans = first_match && dp(i+1, j+1, text, pattern);
            }
        }
        memo[i][j] = ans ? Result.TRUE : Result.FALSE;
        return ans;
    }
}

class Solution {
    public boolean isMatch(String text, String pattern) {
        boolean[][] dp = new boolean[text.length() + 1][pattern.length() + 1];
        dp[text.length()][pattern.length()] = true;

        for (int i = text.length(); i >= 0; i--){
            for (int j = pattern.length() - 1; j >= 0; j--){
                boolean first_match = (i < text.length() &&
                                       (pattern.charAt(j) == text.charAt(i) ||
                                        pattern.charAt(j) == '.'));
                if (j + 1 < pattern.length() && pattern.charAt(j+1) == '*'){
                    dp[i][j] = dp[i][j+2] || first_match && dp[i+1][j];
                } else {
                    dp[i][j] = first_match && dp[i+1][j+1];
                }
            }
        }
        return dp[0][0];
    }
}
