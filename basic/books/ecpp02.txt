#2 Constructors, Destructors, and Assignment Operators

##05 Know what functions C++ Silently writes and calls
编译器声明的如下函数为public且inline。惟有当这些函数被调用时，他们才被编译器创建出来。
编译器产生的析构函数是个non-virtual，除非class的base class有virtual析构函数。
class Empty {
public:
    Empty() {};
    Empty(const Empty& rhs) {};
    ~Empty() {};
    // virtual
    Empty& operator=(const Empty& rhs) {};
}

已有一个构造函数（不管无参带参），编译器不会再生成默认构造函数
默认拷贝构造是浅拷贝

内含reference成员或const成员的class,必须自己定义copy assignment操作符。
base class定义了private的copy assignment，则derived class不自动生成copy assignment操作符。


##06 Explicitly disallow the use of compiler-generated functions you do not want
将copy构造函数或copy assignment操作符声明为private，以阻止调用。但member和friend还是能调。

wd p155
class Uncopyable {
protected:
    Uncopyable() {} //允许derived对象构造和析构
    ~Uncopyable() {}

private:
    Uncopyable(const Uncopyable&); //但阻止copying
    Uncopyable& opearator=(const Uncopyable&);
};

class HomeForSale: private Uncopyable {
    ...
};

不一定得以public继承它 Uncopyable的析构函数不一定是virtual
Uncopyable不含数据 符合empty base class optimization
Uncopyable可能导致多重继承 多重继承有时组织empty base class optimization

可声明为private但不实现（连接期错误），使用uncopyable这样的base class也是一种做法（编译期错误，更好）。


##07 Declare destructors virtual in polymorphic base classes
base class带non-virtual析构函数，则执行时derived成分没销毁

为你希望成为抽象的那个class声明一个pure virtual析构函数
virtual ~AWOV()=0;
你必须为这个pure virtual析构函数提供一份定义 不然连接器会报错
AWOV::~AWOV() {}

polymorphic(带多态性质的)base classes应该声明一个virtual析构函数，如果class带有任何virtual函数，它就应该拥有一个virtual析构函数。
Classes的设计目的不是作为base class使用，亦非为了具备多态性，就不该声明virtual析构函数。


##08 Prevent exceptions from leaving destructors
在两个异常同时存在的情况下，程序若不是结束执行就是导致不明确行为。 调析构抛异常为导致不明确行为

改写try(db.close();) catch(...){std::abort();}
void close() {
    db.close();
    closed = true;
}
~DBConn() {
    if(!closed) {
        try (db.close();)  //双保险调用
    }
    catch (...) {
        '''
    }
}
private:
DBConnection db;
bool closed;
析构函数绝对不要吐出异常。如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们(不传播)或结束程序。
如果客户需要对某个操作函数运行期间抛出的异常做出反应，那么class应该提供一个普通函数(而非在析构函数中)执行该操作。


##09 Never call virtual functions during construction or destruction
当定义一个对象的时候，首先会分配对象内存空间，然后调用构造函数来初始化对象。vptr变量是在构造函数中进行初始化的。
又因为执行虚函数需要通过vptr指针来调用。如果可以定义构造函数为虚函数，那么就会陷入先有鸡还是先有蛋的循环讨论中

base class构造期间virtual函数绝不会下降到derived classes阶层
对象内derived的专属成分尚未被初始化，C++的做法是视他们不存在
C++及virtual函数，dynamic_cast看待构造/析构函数中的derived部分如不存在，当成base class对象

可用
class Transaction {
public:
    explicit Transaction(const std::string& logInfo);
    void logTransaction(const std::string& logInfo) const; // non-virtual
    ...
};
Transaction::Trasaction(const std::string& logInfo)
{
    ...
    logTransaction(logInfo);
}

class BuyTransaction: public Transaction {
public:
    BuyTransaction(parameters)
    :Transaction(createLogString(parameters)) {...}
private:
    static std::string createLogString(parameters);
}

在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class(比起当前执行构造函数和析构函数的那层)


##10 Have Assignment opearators return a reference to *this
连锁赋值
Widget& operator=(const Widget& rhs)
{
    ...
    return *this;
}
令赋值(assignment)操作符返回一个reference to *this


#11 Handle assignment to self in operator=
证同测试
Widget& Widget::operator=(const Widget& rhs)
{
    if (this == &rhs) return *this;
    delete pb;
    pb = new Bitmap(*rhs.pb);
    return *this;
}

异常安全 自我赋值安全
Widget& Widget::operator=(const Widget& rhs)
{
    Bitmap* pOrig = pb;
    pb = new Bitmap(*rhs.pb);
    delete pOrig;
    return *this;
}

Widget& Widget::operator=(const Widget& rhs)
{
    Widget temp(rhs);
    swap(temp);
    return *this;
}

确保当对象自我赋值时operator=有良好行为。其中技术包括比较“来源对象”和“目标对象”的地址，精心周到的语句顺序，以及copy-and-swap。
确定任何函数如果操作一个以上的对象，而其中多个对象是同一个对象时，其行为仍然正确。


##12 Copy all parts of an object
Copying函数应该确保复制“对象内的所有成员变量”及“所有base class成分”。
不要尝试以某个copying函数实现另一个copying函数。应该将共同机能放进第三个函数中，并由两个copying函数共同调用。

